name: Reusable Terraform Workflow

on:
  workflow_call:
    inputs:
      tfmProject:
        description: 'TFM Project'
        required: true
        type: string
      tfmModule:
        description: 'TFM Module'
        required: true
        type: string
      tfmEnvironment:
        description: 'TFM Environment'
        required: true
        type: string
      tfmModuleInstance:
        description: 'TFM Module Instance'
        required: true
        type: string
    # secrets:
    #   AWS_ACCESS_KEY_ID:
    #     required: true
    #   AWS_SECRET_ACCESS_KEY:
    #     required: true
    #   JENKINS_ROLE_ARN:
    #     required: true
    #   NETWORKING_ACCOUNT_ROLE_ARN:
    #     required: true

env:
  # AWS_REGION: 'us-east-1'
  TF_EXEC_MODE_OVERRIDE: 'non-interactive'

jobs:
  terraform:
    name: "${{ inputs.tfmProject}}/${{ inputs.tfmModule}}/${{ inputs.tfmModuleInstance}}"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sorinlg-beta/tf-manage:v6.3.0

    env:
      # setup
      # BUCKET: nxs3tfstates-infra-deployment-${{ inputs.tfmEnvironment }}

      # terraform
      TF_VAR_env: ${{ inputs.tfmEnvironment }}
      # TF_VAR_jenkins_role_arn: ${{ secrets.JENKINS_ROLE_ARN }}
      # TF_VAR_networking_account_role_arn: ${{ secrets.NETWORKING_ACCOUNT_ROLE_ARN }}
      TF_VAR_deployment_tool: github-actions

      # tfm
      _proj: ${{ inputs.tfmProject }}
      _module: ${{ inputs.tfmModule }}
      _env: ${{ inputs.tfmEnvironment }}
      _module_instance: ${{ inputs.tfmModuleInstance }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get target environments
        shell: bash
        id: get_promotion_settings
        run: |
          echo
          echo "TFM execution settings:"
          echo "- tfmProject: ${{ inputs.tfmProject }}"
          echo "- project: ${_proj}"
          echo "- module: ${_module}"
          echo "- environment: ${_env}"
          echo "- module instance: ${_module_instance}"


      # - name: Setup AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: |
          stdout=$(tf "${{ env._proj }}" "${{ env._module }}" "${{ env._env }}" "${{ env._module_instance }}" "fmt" 2>&1 | tee /dev/tty)
          echo "stdout=${stdout}" >> $GITHUB_OUTPUT

      - name: Terraform Init
        id: init
        run: |
          stdout=$(tf "${{ env._proj }}" "${{ env._module }}" "${{ env._env }}" "${{ env._module_instance }}" "init" 2>&1 | tee /dev/tty)
          echo "stdout=${stdout}" >> $GITHUB_OUTPUT

      - name: Terraform Validate
        id: validate
        run: |
          stdout=$(tf "${{ env._proj }}" "${{ env._module }}" "${{ env._env }}" "${{ env._module_instance }}" "validate" 2>&1 | tee /dev/tty)
          echo "stdout=${stdout}" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        id: plan
        run: |
          set +e
          stdout=$(tf "${{ env._proj }}" "${{ env._module }}" "${{ env._env }}" "${{ env._module_instance }}" 'plan -detailed-exitcode' 2>&1 | tee /dev/tty)
          echo "stdout=${stdout}" >> $GITHUB_OUTPUT
          planExitCode=$?
          exitCode=0 # assume failure
          echo "planExitCode=${planExitCode}" >> $GITHUB_ENV
          if [ "$planExitCode" -eq 2 ]; then
            echo "Plan contains changes"
            echo "terraform_plan_changes=true" >> $GITHUB_ENV
            exitCode=0
          elif [ "$planExitCode" -eq 0 ]; then
            echo "No changes in plan"
            echo "terraform_plan_changes=false" >> $GITHUB_ENV
            exitCode=0
          else
            echo "Plan failed"
            exitCode=1
          fi

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

